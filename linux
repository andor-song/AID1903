第二阶段：
	LInux操作系统
	数据结构
	IO网络编程
	并发编程
	正则表达式
	MySQL数据库基础
	项目和项目工具使用

操作系统：
    Unix --> linux

终端操作：
    打开终端:Ctrl + alt +T
            Ctrl + Shift +n 打开一个同级终端
            Ctrl + Shift +t 新建标签页
    关闭终端：exit
    命令行：tarena @ tarena:    ~     $ 
            用户名  计算机名 当前路径
	~表示家目录(主目录)
			绝对路径：以/开头，要从根一级一级的写路径
			修改根目录下的内容需要增加管理员权限，即命令行前增加sudo
			cd 切换工作目录
				进入家目录：
				cd
				cd ~
				cd /home/tarena

				cd ..回到上级目录
				cd .回到当前目录
			ls 查看当前文件夹目录
				-l 以长格式查看文件 
					打开后：第一个字母代表文件类型
				-a 查看文件下的所有文件（含隐藏文件）
			清屏：Ctrl + l
			cp  复制文件 后跟文件名称
				复制文件夹时需加 -r
			rm 删除
				删除文件夹时需加 -rf
				rmdir 删除空文件夹（不需要加-r）
			mv 移动
			mkdir创建文件夹 后跟文件夹名称
				-p表示递归创建 即：一级一级创建
					示例：mkdir -p test/aa/a
			touch 创建文件 后跟文件名称
			cat 查看文件内容

			apt-get update 升级软件包
			apt-get install 安装软件包 后跟软件名称
			apt-get remove --purge 卸载软件
	ifconfig：查看IP
	ssh服务
		ssh是一种安全协议,主要用于给远程登录会话数据进行加密,保证数据传输的安全。在数据传输方面有很多应用。
	Linux下的SSH服务
		在Linux下SSH服务端是一个在后台运行的程序,响应来自客户端的连接请求。 SSH服务端的讲
	程名为sshd,负责实时监听远程SSH客户端的远程连接请求,并进行处理。
		安装 : sudo apt-get install openssh-server
		查看ssh服务状态 : ps -e|grep ssh
		启动和关闭 : sudo service ssh start/restart/stop
					/etc/init.d/ssh start/restart/stop
		ssh命令
		ssh登录远程主机
		ssh [-p port] username@ip
		退出: exit 或 ctrl-D

		scp命令
		scp命令可以用来通过安全、加密的连接在机器间传输文件。
		把本地文件传输给远程系统:
		scp localfile username@tohostname:/newfilename
		把远程文件传输给本地系统:
		scp username@tohostname:/remotefile /localfile

	ssh秘钥
	每次登录远程主机都需要输入密码是很不便捷的,如果要加速这一步骤,可以利用密钥对进行连接,
		主要思路是:生成一对公钥私钥,私钥在local主机上,公钥在远程服务器上,每次建立ssh连接自动检查密钥对是否匹配。
	生产ssh秘钥步骤
		1. 生产秘钥对 : ssh-keygen 执行以后会在主目录下生成一个.ssh文件夹,其中包含私钥文
	件id_rsa和公钥文件id_rsa.pub。
		2. 在服务器主机上将id_rsa.pub文件的内容附加~/.ssh/authorized_keys文件中,并修改器权限。

	编译器使用
	vim使用
		Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器,在Vi的基础上改进和增加了很多特性.
	在部署服务器中，没有其他编译软件使用
	Vim简单实用
	操作命令
	i 在当前字符的左边插入
	o 在当前行下面插入一个新行
	h 向前移动一个字符
	j 向上移动一行
	k 向下移动一行
	l 向后移动一个字符
	yy 复制当前一行
	dd 剪切当前一行
	p 粘贴内容到游标之后
	底行命令
	:w 保存
	:q 退出
	:q! 强行退出
	：set number 显示行号

数据结构：
	--数据：
数据即信息的载体，是能够输入到计算机中并且能被计算机识别、存储和处理的符号总称。
	--数据元素：
数据元素是数据的基本单位，又称之为记录（Record）。一般，数据元素由若干基本项（或称字段、域、属性）组成。
	--数据结构：
数据结构指的是数据元素及数据元素之间的相互关系，或组织数据的形式
	现实问题 --> 数学问题（逻辑结构） --> 计算机处理（存储结构）
数据之间的结构关系
	--逻辑结构：
表示数据之间的抽象关系（如邻接关系、从属关系等），按每个元素可能具有的直接前趋数和直接后继数将逻辑结构分为“线性结构”和“非线性结构”两大类。
	--存储结构：
逻辑结构在计算机中的具体实现方法，分为顺序存储方法、链接存储方法、索引存储方法、散列存储方法。
	
逻辑结构（关系）
	--特点：
只是描述数据结构中数据元素之间的联系规律
是从具体问题中抽象出来的数学模型，是独立于计算机存储器的（与机器无关）
逻辑结构分类
	线性结构
对于数据结构课程而言，简单地说，线性结构是n个数据元素的有序（次序）集合。
集合中必存在唯一的一个"第一个元素"；
集合中必存在唯一的一个"最后的元素"；
除最后元素之外，其它数据元素均有唯一的"后继"；
除第一元素之外，其它数据元素均有唯一的"前驱"。
	树形结构（层次结构）
树形结构指的是数据元素之间存在着“一对多”的树形关系的数据结构，是一类重要的非线性数据结构。在树形结构中，树根结点没有前驱结点，其余每个结点有且只有一个前驱结点。叶子结点没有后续结点，其余每个结点的后续节点数可以是一个也可以是多个。
	图状结构（网状结构）
图是一种比较复杂的数据结构。在图结构中任意两个元素之间都可能有关系，也就是说这是一种多对多的关系。
	其他结构
除了以上几种常见的逻辑结构外，数据结构中还包含其他的结构，比如集合等。有时根据实际情况抽象的模型不止是简单的某一种，也可能拥有更多的特征。
	逻辑结构：跟计算机无关的，是对现实事物进行数学描述
	存储结构：在计算机中组成数据的数据元素按照什么结构存储

	存储结构（关系）
	特点：
是数据的逻辑结构在计算机存储器中的映象（或表示）
存储结构是通过计算机程序来实现的，因而是依赖于具体的计算机语言的。
存储结构分类
	顺序存储
顺序存储（Sequential Storage）：将数据结构中各元素按照其逻辑顺序存放于存储器一片连续的存储空间中。
	链式存储
链式存储（Linked Storage）：将数据结构中各元素分布到存储器的不同点，用记录下一个结点位置的方式建立它们之间的联系，由此得到的存储结构为链式存储结构。
	索引存储
索引存储（Indexed Storage）：在存储数据的同时，建立一个附加的索引表，即索引存储结构=数据文件+索引表。
	散列存储
散列存储(Hash Structure)： 根据数据元素的特殊字段(称为关键字key)，计算数据元素的存放地址，然后数据元素按地址存放，所得到的存储结构为散列存储结构(或Hash结构)。

	线性表
线性表的定义是描述其逻辑结构，而通常会在线性表上进行的查找、插入、删除等操作。
线性表作为一种基本的数据结构类型，在计算机存储器中的映象（或表示）一般有两种形式，一种是顺序映象，一种是链式映象。

	线性表的顺序存储
	定义
若将线性表L=(a0,a1, ……,an-1)中的各元素依次存储于计算机一片连续的存储空间，这种机制表示为线性表的顺序存储结构。

	特点
逻辑上相邻的元素 ai, ai+1，其存储位置也是相邻的；
存储密度高，方便对数据的遍历查找。
对表的插入和删除等运算的效率较差。
	程序实现
在Python中，list存放于一片单一连续的内存块，故可借助于列表类型来描述线性表的顺序存储结构，而且列表本身就提供了丰富的接口满足这种数据结构的运算。

>>>L = [1,2,3,4]
>>>L.append(10)      #尾部增加元素
L
[1, 2, 3, 4, 10]

>>>L.insert(1,20)    #插入元素
L
[1, 20, 2, 3, 4, 10]

>>>L.remove(3)       #删除元素
L
[1, 20, 2, 4, 10]     

>>>L[4] = 30         #修改
L
[1, 20, 2, 4, 30]

>>>L.index(2)        #查找	
	

